version: "3.9"

services:
  # ========= OLLAMA =========
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    restart: unless-stopped
    environment:
      - OLLAMA_HOST=0.0.0.0:11434      # escuta para fora do container
      - OLLAMA_MODELS=/models
    ports:
      - "11434:11434"                  # API pública no host
    volumes:
      - ./models:/models
    security_opt:
      - seccomp:unconfined
    dns:
      - 8.8.8.8
      - 1.1.1.1
    healthcheck:
      # evita depender de curl/wget; usa o CLI do ollama para testar
      test: ["CMD", "ollama", "list"]
      interval: 10s
      timeout: 3s
      retries: 15

  # ========= OPEN WEBUI =========
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    restart: unless-stopped
    environment:
      - OLLAMA_BASE_URL=http://ollama:11434
      - WEBUI_AUTH=False
    ports:
      - "3000:8080"                    # UI no host
    volumes:
      - openwebui_data:/app/backend/data
    depends_on:
      ollama:
        condition: service_healthy

  # ========= POSTGRES (PGVector) =========
  pgvector:
    image: pgvector/pgvector:pg16
    container_name: pgvector
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
    ports:
      - "5433:5432"                    # DB no host (5433)
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro  # cria a extensão vector no 1º arranque
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 3s
      retries: 20

  # ========= ADMINER =========
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    depends_on:
      pgvector:
        condition: service_healthy
    ports:
      - "8081:8080"                    # GUI da BD

volumes:
  openwebui_data:
  pg_data:
